using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SeleniumFramework.UIOperations;
using SeleniumFramework.Utilities.reportUtil;
using AventStack.ExtentReports;
using OpenQA.Selenium;
using OpenQA.Selenium.Remote;
using System.Threading;
using OpenQA.Selenium.Chrome;
using SeleniumFramework.Utilities.XmlUtil;
using OpenQA.Selenium.Support.UI;
using SeleniumFramework.Utilities.common;
using SeleniumFramework.Pages.Day2;

namespace SeleniumFramework.Pages.Day0
{
    class VideoStreaming:UIActions
    {
        public IWebDriver remotedriver;
        LoginPage login = new LoginPage();
        LoggingActivity logging = new LoggingActivity();
        public static XmlReader xmlReader;
        public static IWebElement Button_StartVideo => driver.FindElement(By.CssSelector("div#home-buttons > div > button[data-i18n='startStreamButtonText']"));
        public static IWebElement Button_StopVideo => driver.FindElement(By.CssSelector("div.stop-stream > button[data-i18n='stopStreamButtonText']"));
        
        public static IWebElement Link_StreamTab => driver.FindElement(By.CssSelector("#stream-tab"));
        public static IWebElement Input_EmailBox => driver.FindElement(By.CssSelector("#omni"));
        public static IWebElement Input_Reference => driver.FindElement(By.CssSelector("#reference"));
        public static IWebElement Button_Send => driver.FindElement(By.CssSelector("#send-button"));

        //107376
        public static IWebElement Li_CommunicationTab => driver.FindElement(By.CssSelector("li#tab-comms"));
        public static IWebElement Link_EditButton => driver.FindElement(By.XPath("//a[text()='Edit']"));
        public static IWebElement Label_EmailSubject => driver.FindElement(By.CssSelector("label[for='communication_emailSubject']")); //"input#email-subject"
        public static IWebElement Input_EmailSubject => driver.FindElement(By.CssSelector("input#email-subject"));//communication_receiptEmailSubject receipt-email-subject
        public static IWebElement Label_ReceiptEmailSubject => driver.FindElement(By.CssSelector("label[for='communication_receiptEmailSubject']"));
        public static IWebElement Input_ReceiptEmailSubject => driver.FindElement(By.CssSelector("input#receipt-email-subject"));
        //106077
        public static IWebElement Button_EndSession => driver.FindElement(By.XPath("//div[text()='End Session']"));

        //106240
        public static IWebElement Header_error => driver.FindElement(By.CssSelector("h2.error-message"));
        public static IWebElement Li_30days => driver.FindElement(By.CssSelector(""));
        //TC_37
        public static IWebElement I_VideoLoader => driver.FindElement(By.CssSelector("#remoteVideo p i"));
        public static IWebElement P_AwaitingLiveStream => driver.FindElement(By.XPath("//div[@id='remoteVideo']/div/p[text()='Awaiting Live Stream']"));

        //TC_38
        public static IWebElement P_InvalidMobileMsg => driver.FindElement(By.XPath("//div[@class='input-group top-padding']/following-sibling::p"));

        //TC_39
        public static IWebElement Td_ReferenceLabel => driver.FindElement(By.XPath("//td[text()='Reference: ']"));
        public static IWebElement Td_ReferenceNumber => driver.FindElement(By.XPath("//td[text()='Reference: ']/following-sibling::td"));

        //120959
        public static IWebElement Div_CalleInfoContainer => driver.FindElement(By.CssSelector("div.caller-info-container"));
        public static List<IWebElement> Tr_CalleInfoFields => driver.FindElements(By.CssSelector("table#caller-info-table tr")).ToList();
        public static IWebElement Div_SensitivityFlag => driver.FindElement(By.CssSelector("div#visual-sensitive"));
        public static IWebElement Span_ViewSensitiveSession => driver.FindElement(By.XPath("//span[@class='sensitive-warning']/preceding-sibling::span"));
        public static IWebElement Td_SensitiveSessionLog => driver.FindElement(By.XPath("//td[contains(text(),'sensitive')]"));
        
        
        List<string> temp_List;

        public void RemoteWebDriver(string devicemode=null)
        {
            

            DesiredCapabilities capability = new DesiredCapabilities();
            capability.SetCapability("os_version", BrowserStack_OSVersion);
            capability.SetCapability("device", BrowserStack_Device);
            capability.SetCapability("real_mobile", BrowserStack_realmobile);
            capability.SetCapability("browserstack.local", BrowserSatck_Local);
            capability.SetCapability("browserstack.console", "verbose");
            capability.SetCapability("browserstack.networkLogs", "true");
            //browserstack.networkLogs
            capability.SetCapability("browserstack.user", "yogeshpawar7");
            capability.SetCapability("browserstack.key", "jvhFGqXMWapAU5hKkxnm");

            if (String.IsNullOrEmpty(devicemode))
            {
                capability.SetCapability("deviceOrientation", BrowserStack_DeviceOrientation);
            }
            else
            {
                capability.SetCapability("deviceOrientation", "landscape");
            }
            remotedriver = new RemoteWebDriver(new Uri("http://" + BrowserStack_Server + "/wd/hub"), capability);
        }

        public void SetCapabilities()
        {
            xmlReader = new XmlReader();
            
            xmlReader.LoadXML(GlobalVariables.EnvConfigurationPath);
            GlobalVariables.Environment = xmlReader.ReadTagValue("Environment");
            GlobalVariables.Browser = xmlReader.ReadTagValue("Browser");
           
                GlobalVariables.BrowserStack_Server = xmlReader.ReadTagValue("Server", "BrowserStackConfiguration");
                GlobalVariables.BrowserStack_User = xmlReader.ReadTagValue("UserKey", "BrowserStackConfiguration");
                GlobalVariables.BrowserStack_Key = xmlReader.ReadTagValue("AccessKey", "BrowserStackConfiguration");
                GlobalVariables.BrowserStack_Browser = xmlReader.ReadTagValue("BrowserName", "BrowserStackConfiguration");
                GlobalVariables.BrowserStack_BrowserVersion = xmlReader.ReadTagValue("BrowserVersion", "BrowserStackConfiguration");
               // GlobalVariables.BrowserStack_OS = xmlReader.ReadTagValue("OSName", "BrowserStackConfiguration");
                GlobalVariables.BrowserStack_OSVersion = xmlReader.ReadTagValue("OSVersion", "BrowserStackConfiguration");
                GlobalVariables.BrowserStack_BrowserVersion = xmlReader.ReadTagValue("BrowserVersion", "BrowserStackConfiguration");
               // GlobalVariables.BrowserSatck_Local = xmlReader.ReadTagValue("OSName", "BrowserStackConfiguration");
                GlobalVariables.BrowserStack_realmobile = xmlReader.ReadTagValue("realmobile", "BrowserStackConfiguration");
                GlobalVariables.BrowserStack_Device = xmlReader.ReadTagValue("Device", "BrowserStackConfiguration");
                GlobalVariables.BrowserStack_DeviceOrientation = xmlReader.ReadTagValue("DeviceOrientation", "BrowserStackConfiguration");
        }

        public void StartAndStopStreamingOnRealDevice(string devicemode=null)
        {

            SetCapabilities();
            RemoteWebDriver(devicemode);
            MailRepository.ReadEmail();
            remotedriver.Navigate().GoToUrl(MailRepository.nurl.ElementAt(0));
           
            Thread.Sleep(10000);

            if (IsDialogPresent(remotedriver))
            {

                IAlert alert = remotedriver.SwitchTo().Alert();
                alert.Accept();
            }

            Thread.Sleep(3000);

            remotedriver.FindElement(By.CssSelector("div#home-buttons > div > button[data-i18n='startStreamButtonText']")).Click();
            Thread.Sleep(10000);
            // Logger.Message("Clicked on Start Button");
            if (IsDialogPresent(remotedriver))
            {
                IAlert alert1 = remotedriver.SwitchTo().Alert();
                alert1.Accept();
            }
            Thread.Sleep(5000);
            if (IsDialogPresent(remotedriver))
            {
                IAlert alert1 = remotedriver.SwitchTo().Alert();
                alert1.Accept();
            }
            remotedriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(20);
            Thread.Sleep(7000);

            IWebElement stopButton = remotedriver.FindElement(By.CssSelector("div.stop-stream > button[data-i18n='stopStreamButtonText']"));
            remotedriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);
            Thread.Sleep(10000);
            stopButton.Click();
            //Logger.Message("Clicked on Stop Button");
            remotedriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
            Thread.Sleep(5000);
            remotedriver.Quit();
        }

        public void VerifyExpiredLink(string mail,string errormessage)
        {
            SetCapabilities();
            RemoteWebDriver();

            remotedriver.Navigate().GoToUrl(mail);

            //read the message and verify
            string UIerror = Header_error.GetAttribute("innerText");
            AssertTrue(UIerror.Equals(errormessage));
        }

        bool IsDialogPresent(IWebDriver remotedriver)
        {
            IAlert alert = ExpectedConditions.AlertIsPresent().Invoke(remotedriver);
            return (alert != null);
        }

        public void SendLink(string emaildId,string reference=null)
        {
            //Common.DeleteInbox();
            //click on stream tab
            ClickOn(Link_StreamTab);

            //wwait
            Wait(7);

            // input email ID and reference
            Set_Textbox(Input_EmailBox, emaildId);
            if (String.IsNullOrEmpty(reference))
            {
                Set_Textbox(Input_Reference, "Automation");
            }
            else
            {
                Set_Textbox(Input_Reference, reference);
            }
            Wait(10);
            ClickOn(Button_Send);

        }

        public void VerifyInvalidMailOrMobileNumber(string emaildIdNumber,string ExpectedErrorMsg)
        {
            string UIErrMsg = string.Empty;
            //click on stream tab
            ClickOn(Link_StreamTab);

            // input email ID and reference
            Set_Textbox(Input_EmailBox, emaildIdNumber);
            UIErrMsg = P_InvalidMobileMsg.GetAttribute("innerText");

            //verify msg
            if (UIErrMsg.Equals(ExpectedErrorMsg))
            {
                ExtentReportUtil.report.Log(Status.Pass, "Error Message displayed.");
            }
            else
            {
                ExtentReportUtil.report.Log(Status.Fail, "Error Message Not displayed/enabled");
            }
        }

        public void VerifyAwaitingLiveStreamPage()
        {
            //verify awaiting media
            if (IsElementDisplayedNEnabled(I_VideoLoader) && IsElementDisplayedNEnabled(P_AwaitingLiveStream))
            {
                Highlight(I_VideoLoader);
                Highlight(P_AwaitingLiveStream);
                ExtentReportUtil.report.Log(Status.Pass, "Element displayed & enabled");
            }
            else
            {
                ExtentReportUtil.report.Log(Status.Fail, "Element Not displayed/enabled");
            }

        }

        public void EndStreaming()
        {
            //click on End Session button
            Thread.Sleep(30000);

            //click on End Session button
            ClickOn(Button_EndSession);
        }

        //106376
        public void CheckMailStructureForOrg(string OrgName)
        {
            //Click on Org tab
            ClickOn(LoggingActivity.Link_OrgTab);

            //Search org by name 
            Set_Textbox(LoggingActivity.Input_SearchUser, OrgName);

            //click on Edit button
            ClickOn(Link_EditButton);

            //Click on Communicatio
            Thread.Sleep(3000);


            //verify email structure
            if (IsElementDisplayedNEnabled(Label_EmailSubject) &&
                IsElementDisplayedNEnabled(Input_EmailBox) &&
                IsElementDisplayedNEnabled(Label_ReceiptEmailSubject)&&
                IsElementDisplayedNEnabled(Input_ReceiptEmailSubject))
            {
                Highlight(Label_EmailSubject);
                Highlight(Input_EmailBox);
                Highlight(Label_ReceiptEmailSubject);
                Highlight(Input_ReceiptEmailSubject);
                ExtentReportUtil.report.Log(Status.Pass, "Element displayed & enabled");
            }
            else
            {
                ExtentReportUtil.report.Log(Status.Fail, "Element Not displayed/enabled");
            }

        }

        //111035
        public bool TC111035()
        {
            ViewSession();
            return (logging.VerifyDownloadOnStreamPage());
        }

        public void NegavtiveTC111035()
        {
            if (!TC111035())
            {
                ExtentReportUtil.report.Log(Status.Pass, "Element Not displayed/enabled");
            }
            else
            {
                ExtentReportUtil.report.Log(Status.Fail, "Element displayed/enabled");
            }
        }

        public void VerifyReferenceField(string reference)
        {
            //verify enability of reference field
            if (IsElementDisplayedNEnabled(Input_Reference))
            {
                Highlight(Input_Reference);
                Set_Textbox(Input_Reference, "");
                ExtentReportUtil.report.Log(Status.Pass, "Element displayed/enabled, user able to input Variuos texts in Reference Field");
            }
            else
            {
                ExtentReportUtil.report.Log(Status.Fail, "Element Not displayed/enabled");
            }
        }

        public void VerifyReferenceNumberOnActivity(string reference)
        {
            ViewSession();
            Wait(5);

            //verify reference
            if (IsElementDisplayedNEnabled(Td_ReferenceNumber) && IsElementDisplayedNEnabled(Td_ReferenceLabel))
            {
                string UIrefer = Td_ReferenceNumber.GetAttribute("innerText");
                //verify strings
                if (reference.Equals(UIrefer))
                {
                    ExtentReportUtil.report.Log(Status.Pass, "Correct reference displayed.");
                }
                else
                {
                    ExtentReportUtil.report.Log(Status.Fail, "Error ::Reference Not displayed/enabled or Incorrect");
                }
            }
        }

        public void ViewSession()
        {
            //go to activities tab
            ClickOn(LoggingActivity.Link_ActivitiesTab);
            Wait(5);
            if (LoggingActivity.Allrows.Count <= 1)
            {
                //click on last 30 days from date range
                ClickOn(ReportsPage.Div_Date_Range_box);
                ClickOn(ActivitiesPage.Li_30days);
            }
            Thread.Sleep(3000);
            ClickOn(LoggingActivity.Span_viewSession);
        }

        public void VerifyStreamPageAndSensitiveMedia(List<string> FieldList)
        {
            //temp list for below loops
            string label = string.Empty;
            temp_List = new List<string>();
            //wait
            Wait(5);

            //Verify all the fields
            foreach (IWebElement w in Tr_CalleInfoFields)
            {
                label = w.GetAttribute("innerText");
                temp_List.Add(label);
            }

            //verify two lists
            var difference = temp_List.Except(FieldList);
            if (difference.Count() == 0)
            {
                ExtentReportUtil.report.Log(Status.Pass, "Fields are present as expected");
            }
            else
            {
                ExtentReportUtil.report.Log(Status.Fail, "Fields are missing");
            }


            //click on sensitive flag
            ClickOn(Div_SensitivityFlag);

            Set_Textbox(ActivitiesPage.Input_ClassifyReason, "123456");
            ClickOn(ActivitiesPage.Btn_ClassifySubmit);

        }
        
        public void ViewSensitiveSessionAndVerifyActivtyPage()
        {
            //go to activities tab
            ClickOn(LoggingActivity.Link_ActivitiesTab);
            Wait(5);
            if (LoggingActivity.Allrows.Count <= 1)
            {
                //click on last 30 days from date range
                ClickOn(ReportsPage.Div_Date_Range_box);
                ClickOn(ActivitiesPage.Li_30days);
            }
            Thread.Sleep(3000);

            ClickOn(Span_ViewSensitiveSession);

            //verify sesnsitive entry
            if (IsElementDisplayedNEnabled(Td_SensitiveSessionLog))
            {
                Highlight(Td_SensitiveSessionLog);
                ExtentReportUtil.report.Log(Status.Pass, "Session marked as Sesnsitve log are present as expected");
            }
            else
            {
                ExtentReportUtil.report.Log(Status.Fail, "Session marked as Sesnsitve log is missing");
            }
        }


        public void MakeMediaSensitive()
        {
            ClickOn(Div_SensitivityFlag);
        }

        public void DeclassifyMedia()
        {
            //View Session
            ViewSensitiveSessionAndVerifyActivtyPage();
            ClickOn(Div_SensitivityFlag);

            Set_Textbox(ActivitiesPage.Input_ClassifyReason, "123456");
            ClickOn(ActivitiesPage.Btn_ClassifySubmit);
        }

        public void DeleteAllMailsInbox()
        {
            //Common.DeleteInbox();
        }

    }
 }

